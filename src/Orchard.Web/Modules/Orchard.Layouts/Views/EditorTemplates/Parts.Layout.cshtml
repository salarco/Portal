@using System.Globalization
@model Orchard.Layouts.ViewModels.LayoutPartViewModel
@{
    <!-- Library dependencies. -->
    Style.Require("jQueryUI_Orchard");
    Script.Require("jQueryUI_Draggable");
    Script.Require("jQueryUI_Droppable");
    Script.Require("jQueryUI_Sortable");
    Script.Require("jQueryUI_Resizable");
    Script.Require("jQueryUI_Position");
    Script.Require("TinyMce");
    Style.Include("Lib/font-awesome.css", "Lib/font-awesome.min.css");
    Style.Include("Lib/Bootstrap/bootstrap.css", "Lib/Bootstrap/bootstrap.min.css");
    Script.Include("Lib/underscore.js");
    Script.Include("Lib/angular.js");
    Script.Include("Lib/angular-sanitize.js");
    Script.Include("Lib/angular-resource.js");
    Script.Include("Lib/sortable.js");
    Script.Include("jquery.deserialize.js");

    <!-- Utilities. -->
    Style.Include("dialog.css");
    Script.Include("dialog.js");
    Script.Include("designer.toolbar.js");
    Script.Include("frame.js");
    Script.Include("serializer.js");

    <!-- The actual layout editor. -->
    Style.Include("LayoutEditor.css", "LayoutEditor.min.css");
    Script.Include("Models.js");
    Script.Include("LayoutEditor.js");
    Script.Include("LayoutDesignerHost.js");

    using (Script.Foot()) {
        <script>
            angular
                .module("LayoutEditor")
                .constant("environment", {
                    baseUrl: "@Url.Content("~/Modules/Orchard.Layouts/")"
                });

            (function() {
                var canvasModelData = @Html.Raw(Model.Data);
                var canvasConfig = @Html.Raw(Model.ConfigurationData);

                window.layoutDesignerCanvas = LayoutEditor.Canvas.from(canvasConfig, canvasModelData);
            })(jQuery);
</script>
    }

    var contentId = Model.Content != null ? Model.Content.Id : default(int?);
    var contentType = Model.Content != null ? Model.Content.ContentItem.ContentType : default(string);
}

<div class="layout-designer"
     data-modelstate-valid="@ViewData.ModelState.IsValid.ToString().ToLower()"
     data-base-url="@Url.Content("~/Modules/Orchard.Layouts")"
     data-render-url="@Url.Action("Render", "Element", new { contentId = contentId, contentType = contentType, area = "Orchard.Layouts" })"
     data-display-type="Design"
     data-element-browser-url="@Url.Action("Browse", "Element", new { session = Model.SessionKey, contentId = contentId, contentType = contentType, area = "Orchard.Layouts" })"
     data-edit-url="@Url.Action("Edit", "Element", new { session = Model.SessionKey, contentId = contentId, contentType = contentType, area = "Orchard.Layouts" })"
     data-add-url="@Url.Action("Add", "Element", new { session = Model.SessionKey, contentId = contentId, contentType = contentType, area = "Orchard.Layouts" })"
     data-apply-template-url="@Url.Action("ApplyTemplate", "Layout", new { contentId = contentId, contentType = contentType, area = "Orchard.Layouts" })"
     data-confirm-delete-prompt="@T("Are you sure you want to delete this element?")"
     data-editor-dialog-title-format="@T("$1 Properties")"
     data-editor-dialog-name="Layout"
     data-anti-forgery-token="@Html.AntiForgeryTokenValueOrchard()"
     data-session-key="@Model.SessionKey">

    @Html.HiddenFor(m => m.TemplateId, new { @class = "template-id-field" })
    @Html.HiddenFor(m => m.SessionKey)
    @Html.HiddenFor(m => m.Data, new { @class = "layout-data-field" })
    <fieldset>
        <label>@T("Layout")</label>
        <div class="group canvas-toolbar">
            <div class="pull-right">
                <ol class="group">
                    @if (Model.Templates.Any()) {
                        var options = Model.Templates.Select(x => new SelectListItem { Text = Html.ItemDisplayText(x).ToString(), Value = x.Id.ToString(CultureInfo.InvariantCulture), Selected = x.Id == Model.TemplateId });
                        <li>
                            <div class="template-picker">
                                <label>
                                    @T("Use existing Layout:")
                                    @Html.DropDownList("template-picker", options, T("(None)").Text)
                                </label>
                            </div>
                        </li>
                    }
                </ol>
            </div>
        </div>
        <!-- Note the model attribute, initializes the canvas bound to a given model. -->
        <orc-layout-canvas model="window.layoutDesignerCanvas" ng-app="LayoutEditor" />

    </fieldset>
    <div class="trash"></div>
    @Display.DialogTemplate(Name: "Layout")
</div>